<template>
      <div class="card">
        <div class="card-header">
          <div class="row">
              <div class="col-md-6"><h5>Enrolments list</h5></div>
              <div class="col-md-6">
                <router-link :to="{ name: 'createEnrolment' }" class="btn btn-outline-info createBtn">Add</router-link>   <!-- Router link to createEnrolment -->
              </div>
          </div>
        </div>
          <div class="card-body">
            <p v-if="enrolments.length == 0">There are no enrolments</p> <!-- if there are no enrolments then display paragraph -->
            <div class="table-responsive">
              <table v-if="enrolments.length != 0" class="col-md-12"> <!-- If enrolments array is not empty -->
                  <thead>
                      <tr>
                        <th>Date</th> <!-- table headings for enrolments list -->
                        <th>Time</th>
                        <th>Status</th>
                        <th>Course</th>
                        <th>Student</th>
                        <th>Actions</th>
                      </tr>
                  </thead>
                  <tbody>
                      <tr class="divider" v-for="enrolment in enrolments"> <!-- for loop creating row for each enrolment in the enrolment array -->
                        <td>{{ enrolment.date }}</td> <!-- display enrolments date -->
                        <td>{{ enrolment.time }}</td> <!-- display enrolments time -->
                        <!-- display and set the first character of status to Upper case and display the rest of the status -->
                        <td>{{ enrolment.status.charAt(0).toUpperCase() + enrolment.status.slice(1)}}</td>
                        <td>{{ enrolment.course.title }}</td> <!-- display title of the course within the enrolment obj -->
                        <td>{{ enrolment.student.name }}</td> <!-- display the name of the student within the enrolment obj -->
                        <td>
                          <!-- router link to navigate to view the enrolment, pass params of enrolment id to new viewEnrolment component -->
                          <router-link :to="{ name: 'viewEnrolment', params: { id: enrolment.id } }" class="btn btn-outline-secondary">View</router-link>
                          <!-- outer link to navigate to edit the enrolment, pass params of enrolment id to new editEnrolment component -->
                          <router-link :to="{ name: 'editEnrolment', params: { id: enrolment.id } }" class="btn btn-outline-primary">Edit</router-link>
                          <!-- button that calls the deleteEnrolment method when clicked, passes enrolment id in parameter to identify enrolment -->
                          <button class="removeBtn btn btn-outline-danger" v-on:click="deleteEnrolment(enrolment.id)">Delete</button>
                        </td>
                      </tr>
                  </tbody>
              </table>
            </div>
        </div>
    </div>
</template>

<script>
    export default {
      data() {
          return {
              enrolments: [], //enrolments array
              errors: {},
            }
        },
        mounted() { //carried out when component is loaded
          if(localStorage.getItem('token')===null) { //if localStorage is empty
            this.$router.replace({ name: "login"}) //then replace the component with the component with the name of login
          }
            var app = this; //setting this to app
            var token = localStorage.getItem('token'); //declaring token variable to be used in axios request
            axios.get('/api/enrolments', { //GET request to url of api/enrolments
            headers: { Authorization: "Bearer " + token }  }) //send header with token of type Bearer with the request

            .then(function (resp) { //if Successful
                app.enrolments = resp.data; //setting the enrolments that were received as response data
                console.log(resp.data); //display the response within the console
               //setting the enrolments that were received as response data
            })
            .catch(function (resp) {
                console.log(resp);
            });
        },
        methods: { //methods
          deleteEnrolment(enrolmentId) { //delete method with enrolmentId passed as parameter to identify the correct enrolment
              event.preventDefault();
              var app = this; //setting this to variable app
              if (confirm("Are you sure you want to delete this enrolment?")) { //confirmation box to confirm if user wants to delte the enrolment
              var token = localStorage.getItem('token'); //setting varibale as token in localStorage
              axios.delete('/api/enrolments/' + enrolmentId, //axios delete request with url for REST Api route, with the enrolment id of the enrolment to be delted
              {
                 headers: { Authorization: "Bearer " + token} //headers for the request with Bearer tokeen
               })
                  .then(function (resp) { //if successful
                      var index = app.enrolments.findIndex(function (enrolment) { //find the index of the enrolment so it can be removed from the list of enrolments
                      return enrolment.id == enrolmentId; //enrolment.id is enrolmentId
                    });
                        $("#SuccessDeleteModal").modal() //calling modal that is in App component
                        app.enrolments.splice(index, 1); //removing the enrolment from the list of enrolments
                        console.log("Deleted enrolment"); //console.log that the enrolment has been deleted

                })
                  .catch(function (resp) { //if the request fails
                    console.log(resp); //display the response in the console
                    console.log("Could not delete enrolment") //console.log that the enrolment could not be deleted
                });
          }
        }
      }
    }
</script>

<style scoped>

th, td{
  padding: 2px 5px;
}

.createBtn{
  float: right;
}
.removeBtn{
  color: #e84e4e;
  border-color: #e84e4e;
}
.removeBtn:hover{
  color: white;
background: #e84e4e;
}


</style>
